# AUTOGENERATED! DO NOT EDIT! File to edit: ../oop.ipynb.

# %% auto 0
__all__ = ['FAKE_TIME', 'TransactionType', 'InsufficentBalanceError', 'TransactionNotFoundError', 'Transaction', 'BankAccount',
           'patch_datetime_now', 'TestBankAccount']

# %% ../oop.ipynb 10
from enum import Enum
import datetime

class TransactionType(Enum):
    DEPOSIT = "D"
    WITHDRAWAL = "W"
    INTEREST = 'I'
    DECLINED = "X"

class InsufficentBalanceError(RuntimeError):
    pass

class TransactionNotFoundError(RuntimeError):
    pass

class Transaction:
    def __init__(self, transaction_type: TransactionType, account_number, time, id) -> None:
        self.transaction_type = transaction_type
        self.account_number = account_number
        self.time = time
        self.id = id

    @property
    def confirmation_number(self):
        return f"{self.transaction_type.value}_{self.account_number}_{str(self.time)}_{self.id}"

class BankAccount:
    monthly_interest_rate = 0.05
    transaction_id = 0
    transactions = {}

    def __init__(self, account_number, tz_offset, existing_balance, first_name, last_name) -> None:
        self.account_number = account_number
        self._tz_offset = datetime.timedelta(hours=tz_offset)

        if existing_balance < 0:
            raise InsufficentBalanceError("Unable to create account with negative balance.")
        
        self._balance = existing_balance

        self._first_name = first_name
        self._last_name = last_name

    @property
    def balance(self):
        return self._balance
    
    @property
    def name(self):
        return f"{self._first_name} {self._last_name}"
    
    def _add_transaction(self, transaction: Transaction):
        self.transactions[transaction.confirmation_number] = transaction
        return transaction.confirmation_number

    
    def deposit(self, amount):
        self._balance += amount

        time_of_transaction = datetime.datetime.utcnow()
        BankAccount.transaction_id += 1
        transaction = Transaction(TransactionType.DEPOSIT, self.account_number, time_of_transaction, BankAccount.transaction_id )
        self.transactions[transaction.confirmation_number] = transaction
        return transaction.confirmation_number

    def withdraw(self, amount):
        time_of_transaction = datetime.datetime.utcnow()
        BankAccount.transaction_id += 1

        if self._balance < amount:
            transaction = Transaction(TransactionType.DECLINED, self.account_number, time_of_transaction, BankAccount.transaction_id)
            return self._add_transaction(transaction)
        else:
            self._balance -= amount
            transaction = Transaction(TransactionType.WITHDRAWAL, self.account_number, time_of_transaction, BankAccount.transaction_id)
            return self._add_transaction(transaction)

    def add_interest(self):
        self._balance += self._balance * self.monthly_interest_rate
        BankAccount.transaction_id += 1
        time_of_transaction = datetime.datetime.utcnow()
        transaction = Transaction(TransactionType.INTEREST, self.account_number, time_of_transaction, BankAccount.transaction_id)
        return self._add_transaction(transaction)
    
    def get_transaction(self, confirmation_number):
        transaction = self.transactions.get(confirmation_number, None)

        if transaction is None:
            raise TransactionNotFoundError()
        
        return transaction
    

# %% ../oop.ipynb 12
import pytest

FAKE_TIME = datetime.datetime(2023, 10, 26, 10, 10, 10)

@pytest.fixture(autouse=True)
def patch_datetime_now(monkeypatch):
    class mockdatetime(datetime.datetime):
        @classmethod
        def utcnow(cls):
            return FAKE_TIME

    monkeypatch.setattr(datetime,'datetime', mockdatetime)


class TestBankAccount:
    @pytest.fixture(autouse=True)
    def test_account(self):
        self._account = BankAccount("Account123", -5, 100, "Yi Hein", "Chai")
        BankAccount.transaction_id = 0

    def test_can_create_account(self):
        acc = BankAccount("Account123", -5, 100, "Yi Hein", "Chai")
        assert acc.account_number == "Account123"
        assert acc.name == "Yi Hein Chai"
        assert acc.balance == 100

    def test_create_account_neg_balance(self):
        with pytest.raises(InsufficentBalanceError) as excinfo:
            acc = BankAccount("Account123", -5, -100, "Yi Hein", "Chai")

        assert "negative balance" in str(excinfo.value)

    def test_withdraw_negative_balance(self):
        confirmation_code = self._account.withdraw(200)
        assert self._account.balance == 100
        assert confirmation_code[0] == TransactionType.DECLINED.value

    def test_interest_deposit(self):
        confirmation_code = self._account.add_interest()
        assert self._account.balance == 105
        assert confirmation_code[0] == TransactionType.INTEREST.value

    def test_confirmation_number(self):
        confirmation_code = self._account.deposit(200)
        assert confirmation_code == "D_Account123_2023-10-26 10:10:10_1"

    def test_get_transaction(self):
        confirmation_code = self._account.deposit(200)
        transaction = self._account.get_transaction(confirmation_code)

        assert transaction.account_number == self._account.account_number
        assert transaction.transaction_type ==  TransactionType.DEPOSIT

